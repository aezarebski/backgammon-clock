#+title: Backgammon timer implementation

The code for the backgammon clock is contained in this literate program.

* HTML

#+begin_src html :noweb no-export :tangle backgammon-clock.html
  <!DOCTYPE html>
  <html lang="en">
      <head>
          <meta charset="utf-8"/>
          <link rel="stylesheet" href="stylesheet.css">
      </head>

      <body onkeypress="respondToEvent()">

          <h1 id="result" class="informationText"></h1>

          <div id="playerOneBox" class="playerOneBoxOff" onclick="startOne()">
              <h1 id="playerOneName" class="playerOneOff">Red</h1>
              <p id="playerOneTime" class="playerOneOff"></p>
          </div>

          <div id="playerTwoBox" class="playerTwoBoxOff" onclick="startTwo()">
              <h1 id="playerTwoName" class="playerTwoOff">White</h1>
              <p id="playerTwoTime" class="playerTwoOff"></p>
          </div>

          <<restartButtonHtml>>

          <p class="informationText" style="margin-top:100px;">
            Press "r" to start red's timer and "w" to start white's timer.
            Clicking the "restart" button will restart both clocks.
          </p>

          <script
              src="http://localhost:8000/bgclock.js">
          </script>

      </body>
  </html>
#+end_src

The restart button is a simple =div= that calls the =restartClock= function upon
being clicked.

#+name: restartButtonHtml
#+begin_src html :noweb yes
        <div id="restartButton" class="informationBox" onclick="restartClock()">
            <h1 class="informationText">Restart</h1>
        </div>
#+end_src

* Typescript

#+begin_src javascript :tangle bgclock.ts
// This is used as a way to specify which key starts the timer for each player.
var PlayerKey = {
    PLAYERONE: 114,
    PLAYERTWO: 119
};

// This is used to specify which player's clock is currently running.
var ClockState = {
    OFF: 0,
    PLAYERONE: 1,
    PLAYERTWO: 2
};

// The number of minutes allocated to each player at the start of the match.
var numMinutes = 3;
// The number of seconds that each player gets to make a move.
var numSecondsPerPlay = 15;
var playerOneTime;
var playerTwoTime;
var gameClockState = ClockState.OFF;
#+end_src

The =restartClock= function is a useful way to set everything back to the
initial state.

#+begin_src javascript :tangle bgclock.ts
function restartClock() {
    console.log("setting the clocks to initial state");

    document.getElementById("playerOneName").className = "playerOneOff";
    document.getElementById("playerOneTime").className = "playerOneOff";
    document.getElementById("playerOneBox").className = "playerOneBoxOff";
    document.getElementById("playerTwoName").className = "playerTwoOff";
    document.getElementById("playerTwoTime").className = "playerTwoOff";
    document.getElementById("playerTwoBox").className = "playerTwoBoxOff";

    playerOneTime = numMinutes * 60;
    playerTwoTime = numMinutes * 60;
    gameClockState = ClockState.OFF;
    document.getElementById("playerOneTime").innerHTML = playerOneTime.toString();
    document.getElementById("playerTwoTime").innerHTML = playerTwoTime.toString();
}
#+end_src

#+begin_src javascript :tangle bgclock.ts
function refreshClockOne() {
  document.getElementById("playerOneTime").innerHTML = playerOneTime.toString();
}

function refreshClockTwo() {
  document.getElementById("playerTwoTime").innerHTML = playerTwoTime.toString();
}

function runTimerOne() {
  if (gameClockState == ClockState.PLAYERONE) {
    playerOneTime--;
    refreshClockOne();
    if (playerOneTime > 0) {
      var t = setTimeout(runTimerOne, 1000);
    }
    else {
      clockRanOut(1);
    }
  }
}

function runTimerTwo() {
  if (gameClockState == ClockState.PLAYERTWO) {
      playerTwoTime--;
      refreshClockTwo();
      if (playerTwoTime > 0) {
        var t = setTimeout(runTimerTwo, 1000);
      }
      else {
        clockRanOut(2);
      }
  }
}
#+end_src

#+begin_src javascript :tangle bgclock.ts
function clockRanOut(playerNumber: number) {
  gameClockState = ClockState.OFF;
  var message = (playerNumber == 1 ? "Red" : "White") + " player ran out of time!";
  document.getElementById("result").innerHTML = message;
}

function startOne() {
  if (gameClockState == ClockState.PLAYERTWO) {
    playerTwoTime += numSecondsPerPlay;
    refreshClockTwo();
  }
  document.getElementById("playerOneName").className = "playerOneOn";
  document.getElementById("playerOneTime").className = "playerOneOn";
  document.getElementById("playerOneBox").className = "playerOneBoxOn";
  document.getElementById("playerTwoName").className = "playerTwoOff";
  document.getElementById("playerTwoTime").className = "playerTwoOff";
  document.getElementById("playerTwoBox").className = "playerTwoBoxOff";
  if (gameClockState != ClockState.PLAYERONE) {
    gameClockState = ClockState.PLAYERONE;
    console.log("starting player one timer");
    runTimerOne();
  }
}

function startTwo() {
  if (gameClockState == ClockState.PLAYERONE) {
    playerOneTime += numSecondsPerPlay;
    refreshClockOne();
  }
  document.getElementById("playerOneName").className = "playerOneOff";
  document.getElementById("playerOneTime").className = "playerOneOff";
  document.getElementById("playerOneBox").className = "playerOneBoxOff";
  document.getElementById("playerTwoName").className = "playerTwoOn";
  document.getElementById("playerTwoTime").className = "playerTwoOn";
  document.getElementById("playerTwoBox").className = "playerTwoBoxOn";
  if (gameClockState != ClockState.PLAYERTWO) {
    gameClockState = ClockState.PLAYERTWO;
    console.log("starting player two timer");
    runTimerTwo();
  }
}

function respondToEvent() {
  if (event.which == PlayerKey.PLAYERONE) {
    startOne();
  } else if (event.which == PlayerKey.PLAYERTWO) {
    startTwo();
  } else {
    console.log("neither w nor r so not doing anything...");
    console.log("the event code is " + event.which);
  }
};

restartClock();
#+end_src

The following typescript can be compiled to javascript using =tsc=.

#+begin_src sh
nix-shell -p nodePackages.typescript
tsc bgclock.ts
#+end_src

This then produces the javascript that is used by the application.

* CSS

#+begin_src css :tangle stylesheet.css
body {
    background-color: rgb(46,52,64);
    font-family: Arial, Helvetica, sans-serif;
}

h1 {
    font-size: 40px;
    padding-top: 20px;
}

p {
    font-size: 40px;
}

.playerOneBoxOff {
    border-style: inset;
    border-color: rgb(191,97,106, 0.2);
    border-width: 7px;
    width: 200px;
    margin: 10px;
}

.playerOneOff {
    color: rgb(191,97,106, 0.2);
    padding-left: 50px;
}

.playerOneBoxOn {
    border-style: outset;
    border-color: rgb(191,97,106, 1.0);
    border-width: 7px;
    width: 200px;
    margin: 10px;
}

.playerOneOn {
    color: rgb(191,97,106, 1.0);
    padding-left: 50px;
}


.playerTwoBoxOff {
    border-style: inset;
    border-color: rgb(216,222,233,0.2);
    border-width: 7px;
    width: 200px;
    margin: 10px;
}

.playerTwoOff {
    color: rgb(216,222,233,0.2);
    padding-left: 50px;
}

.playerTwoBoxOn {
    border-style: outset;
    border-color: rgba(200, 200, 200, 1.0);
    border-width: 7px;
    width: 200px;
    margin: 10px;
}

.playerTwoOn {
    color: rgba(200, 200, 200, 1.0);
    padding-left: 50px;
}

.informationBox {
    border-style: outset;
    border-color: rgb(94,129,172);
    border-width: 7px;
    width: 200px;
    margin: 10px;
}

.informationText {
    font-size: 20px;
    color: rgb(94,129,172);
    padding: 10px;
}
#+end_src
